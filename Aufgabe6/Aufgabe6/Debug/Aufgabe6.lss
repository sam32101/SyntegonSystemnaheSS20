
Aufgabe6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000176  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000122  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000176  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001a8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007de  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000703  00000000  00000000  000009f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002fd  00000000  00000000  000010f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000013f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003c6  00000000  00000000  0000143c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000075  00000000  00000000  00001802  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001877  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a0 30       	cpi	r26, 0x00	; 0
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 70 00 	call	0xe0	; 0xe0 <main>
  88:	0c 94 8f 00 	jmp	0x11e	; 0x11e <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <initSerial>:

void initSerial(){
	
	// initialize serial communication
	/*Set baud rate */
	UBRR0H = (MYUBRR >> 8);
  90:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
	UBRR0L = MYUBRR;
  94:	87 e6       	ldi	r24, 0x67	; 103
  96:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	
	UCSR0B |= (1 << TXEN0);      // Enable transmitter
  9a:	e1 ec       	ldi	r30, 0xC1	; 193
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 81       	ld	r24, Z
  a0:	88 60       	ori	r24, 0x08	; 8
  a2:	80 83       	st	Z, r24
	UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00);    // Set frame: 8data, 1 stp
  a4:	e2 ec       	ldi	r30, 0xC2	; 194
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	80 81       	ld	r24, Z
  aa:	86 60       	ori	r24, 0x06	; 6
  ac:	80 83       	st	Z, r24
  ae:	08 95       	ret

000000b0 <ADCsingleREAD>:

void ADCsingleREAD(uint8_t adctouse)
{
	int ADCval;

	ADMUX = adctouse;         // use #1 ADC
  b0:	ec e7       	ldi	r30, 0x7C	; 124
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 83       	st	Z, r24
	ADMUX |= (1 << REFS0);    // use AVcc as the reference
  b6:	80 81       	ld	r24, Z
  b8:	80 64       	ori	r24, 0x40	; 64
  ba:	80 83       	st	Z, r24
	ADMUX |= (1 << ADLAR);   // set for 8 bit resolution
  bc:	80 81       	ld	r24, Z
  be:	80 62       	ori	r24, 0x20	; 32
  c0:	80 83       	st	Z, r24
	
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);    // 128 prescale for 8Mhz
  c2:	ea e7       	ldi	r30, 0x7A	; 122
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	87 60       	ori	r24, 0x07	; 7
  ca:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);    // Enable the ADC
  cc:	80 81       	ld	r24, Z
  ce:	80 68       	ori	r24, 0x80	; 128
  d0:	80 83       	st	Z, r24

	ADCSRA |= (1 << ADSC);    // Start the ADC conversion
  d2:	80 81       	ld	r24, Z
  d4:	80 64       	ori	r24, 0x40	; 64
  d6:	80 83       	st	Z, r24

	while(ADCSRA & (1 << ADSC));      // wait for ADC to finish
  d8:	80 81       	ld	r24, Z
  da:	86 fd       	sbrc	r24, 6
  dc:	fd cf       	rjmp	.-6      	; 0xd8 <ADCsingleREAD+0x28>

}
  de:	08 95       	ret

000000e0 <main>:

int main(void)
{
/*	int ADCvalue;*/
	
	initSerial();
  e0:	0e 94 48 00 	call	0x90	; 0x90 <initSerial>
	while (1)
	{
		// Convert Input 0 to Digital
		ADCsingleREAD(0);			
		// transmit result
		UDR0 = ADCH;
  e4:	09 e7       	ldi	r16, 0x79	; 121
  e6:	10 e0       	ldi	r17, 0x00	; 0
  e8:	c6 ec       	ldi	r28, 0xC6	; 198
  ea:	d0 e0       	ldi	r29, 0x00	; 0
	initSerial();

	while (1)
	{
		// Convert Input 0 to Digital
		ADCsingleREAD(0);			
  ec:	80 e0       	ldi	r24, 0x00	; 0
  ee:	0e 94 58 00 	call	0xb0	; 0xb0 <ADCsingleREAD>
		// transmit result
		UDR0 = ADCH;
  f2:	f8 01       	movw	r30, r16
  f4:	80 81       	ld	r24, Z
  f6:	88 83       	st	Y, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f8:	87 ea       	ldi	r24, 0xA7	; 167
  fa:	91 e6       	ldi	r25, 0x61	; 97
  fc:	01 97       	sbiw	r24, 0x01	; 1
  fe:	f1 f7       	brne	.-4      	; 0xfc <main+0x1c>
 100:	00 c0       	rjmp	.+0      	; 0x102 <main+0x22>
 102:	00 00       	nop
		
		_delay_ms(100);
		
		//Convert Input 1 to digital
		ADCsingleREAD(1);
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	0e 94 58 00 	call	0xb0	; 0xb0 <ADCsingleREAD>
		// transmit result
		UDR0 = ADCH;
 10a:	f8 01       	movw	r30, r16
 10c:	80 81       	ld	r24, Z
 10e:	88 83       	st	Y, r24
 110:	87 ea       	ldi	r24, 0xA7	; 167
 112:	91 e6       	ldi	r25, 0x61	; 97
 114:	01 97       	sbiw	r24, 0x01	; 1
 116:	f1 f7       	brne	.-4      	; 0x114 <main+0x34>
 118:	00 c0       	rjmp	.+0      	; 0x11a <main+0x3a>
 11a:	00 00       	nop
 11c:	e7 cf       	rjmp	.-50     	; 0xec <main+0xc>

0000011e <_exit>:
 11e:	f8 94       	cli

00000120 <__stop_program>:
 120:	ff cf       	rjmp	.-2      	; 0x120 <__stop_program>
