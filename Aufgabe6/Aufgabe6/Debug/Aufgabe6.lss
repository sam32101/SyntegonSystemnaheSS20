
Aufgabe6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000018c  00000200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000018c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000202  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000234  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000758  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006a7  00000000  00000000  00000a0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002b6  00000000  00000000  000010b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000ac  00000000  00000000  0000136c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ac  00000000  00000000  00001418  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000f8  00000000  00000000  000017c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000018bc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 88 00 	jmp	0x110	; 0x110 <__vector_11>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e8       	ldi	r30, 0x8C	; 140
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 bf 00 	call	0x17e	; 0x17e <main>
  8e:	0c 94 c4 00 	jmp	0x188	; 0x188 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <initSerial>:
// serielle Kommunikation initialisieren
void initSerial(){
	
	// serielle Kommunikation initialisieren
	/*Setze baud rate */
	UBRR0H = (MYUBRR >> 8);
  96:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
	UBRR0L = MYUBRR;
  9a:	87 e6       	ldi	r24, 0x67	; 103
  9c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	
	UCSR0B |= (1 << TXEN0);      // Aktiviere transmitter
  a0:	e1 ec       	ldi	r30, 0xC1	; 193
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	80 81       	ld	r24, Z
  a6:	88 60       	ori	r24, 0x08	; 8
  a8:	80 83       	st	Z, r24
	UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00);    // definiere frame: 8data, 1 stp
  aa:	e2 ec       	ldi	r30, 0xC2	; 194
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	86 60       	ori	r24, 0x06	; 6
  b2:	80 83       	st	Z, r24
  b4:	08 95       	ret

000000b6 <initTimer>:

//timer initialisieren
void initTimer(){
	// Jeden wert 1x Pro Sekunde auslesen = 2 Aktionen pro Sekunde
	// [ (16MHz / 256) * 0.5]-1 = 31249 = 7A11
	OCR1A = 0x7A11;
  b6:	81 e1       	ldi	r24, 0x11	; 17
  b8:	9a e7       	ldi	r25, 0x7A	; 122
  ba:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
  be:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
	
	TCCR1B |= (1 << WGM12);
  c2:	e1 e8       	ldi	r30, 0x81	; 129
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	88 60       	ori	r24, 0x08	; 8
  ca:	80 83       	st	Z, r24
	// Modus 4, CTC auf OCR1A
	
	TIMSK1 |= (1 << OCIE1A);
  cc:	af e6       	ldi	r26, 0x6F	; 111
  ce:	b0 e0       	ldi	r27, 0x00	; 0
  d0:	8c 91       	ld	r24, X
  d2:	82 60       	ori	r24, 0x02	; 2
  d4:	8c 93       	st	X, r24
	//Löse Interupt bei Vergleichsübereinstimmung ( compare match ) aus
	
	TCCR1B |= (1 << CS12);
  d6:	80 81       	ld	r24, Z
  d8:	84 60       	ori	r24, 0x04	; 4
  da:	80 83       	st	Z, r24
	// prescaler auf 256 und timer starten
	
	sei();
  dc:	78 94       	sei
  de:	08 95       	ret

000000e0 <ADCsingleREAD>:
// ADC für gegbenen Eingang durchführen (einmalig)
void ADCsingleREAD(uint8_t adctouse)
{
	int ADCval;

	ADMUX = adctouse;         // Benutze gegebnen analogen Eingang
  e0:	ec e7       	ldi	r30, 0x7C	; 124
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	80 83       	st	Z, r24
	ADMUX |= (1 << REFS0);    // Benutze AVcc als Referenz
  e6:	80 81       	ld	r24, Z
  e8:	80 64       	ori	r24, 0x40	; 64
  ea:	80 83       	st	Z, r24
	ADMUX |= (1 << ADLAR);    // 8 Bit Auflösung
  ec:	80 81       	ld	r24, Z
  ee:	80 62       	ori	r24, 0x20	; 32
  f0:	80 83       	st	Z, r24
	
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);    // 128 prescale für 8Mhz
  f2:	ea e7       	ldi	r30, 0x7A	; 122
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 81       	ld	r24, Z
  f8:	87 60       	ori	r24, 0x07	; 7
  fa:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);    // Aktiviere die ADC
  fc:	80 81       	ld	r24, Z
  fe:	80 68       	ori	r24, 0x80	; 128
 100:	80 83       	st	Z, r24

	ADCSRA |= (1 << ADSC);    // Starte die ADC
 102:	80 81       	ld	r24, Z
 104:	80 64       	ori	r24, 0x40	; 64
 106:	80 83       	st	Z, r24

	while(ADCSRA & (1 << ADSC));      //warte bis ADC abgeschlossen ist
 108:	80 81       	ld	r24, Z
 10a:	86 fd       	sbrc	r24, 6
 10c:	fd cf       	rjmp	.-6      	; 0x108 <ADCsingleREAD+0x28>

}
 10e:	08 95       	ret

00000110 <__vector_11>:
// und über die serielle Schnittstelle in 8 Bit Auflösung abwechselnd an den PC übertragen (Kanalmultiplexer)
volatile bool input = true;

// timer compare match interupt (alle .5 Sekunden)
ISR (TIMER1_COMPA_vect)
{
 110:	1f 92       	push	r1
 112:	0f 92       	push	r0
 114:	0f b6       	in	r0, 0x3f	; 63
 116:	0f 92       	push	r0
 118:	11 24       	eor	r1, r1
 11a:	2f 93       	push	r18
 11c:	3f 93       	push	r19
 11e:	4f 93       	push	r20
 120:	5f 93       	push	r21
 122:	6f 93       	push	r22
 124:	7f 93       	push	r23
 126:	8f 93       	push	r24
 128:	9f 93       	push	r25
 12a:	af 93       	push	r26
 12c:	bf 93       	push	r27
 12e:	ef 93       	push	r30
 130:	ff 93       	push	r31
	// lese je nach input flag Analog Eingang 1 oder 0 ein
	// ändere flag wert
	if(input){
 132:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 136:	88 23       	and	r24, r24
 138:	21 f0       	breq	.+8      	; 0x142 <__vector_11+0x32>
		ADCsingleREAD(0);
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	0e 94 70 00 	call	0xe0	; 0xe0 <ADCsingleREAD>
 140:	03 c0       	rjmp	.+6      	; 0x148 <__vector_11+0x38>
	}
	else{
		ADCsingleREAD(1);
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	0e 94 70 00 	call	0xe0	; 0xe0 <ADCsingleREAD>
	}
	
	input = !input;
 148:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	89 27       	eor	r24, r25
 150:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	
	// Gelesenen wert in Transmitbuffer schreiben
	UDR0 = ADCH;
 154:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
 158:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
	
}
 15c:	ff 91       	pop	r31
 15e:	ef 91       	pop	r30
 160:	bf 91       	pop	r27
 162:	af 91       	pop	r26
 164:	9f 91       	pop	r25
 166:	8f 91       	pop	r24
 168:	7f 91       	pop	r23
 16a:	6f 91       	pop	r22
 16c:	5f 91       	pop	r21
 16e:	4f 91       	pop	r20
 170:	3f 91       	pop	r19
 172:	2f 91       	pop	r18
 174:	0f 90       	pop	r0
 176:	0f be       	out	0x3f, r0	; 63
 178:	0f 90       	pop	r0
 17a:	1f 90       	pop	r1
 17c:	18 95       	reti

0000017e <main>:


int main(void)
{
	// initialisieren	
	initSerial();
 17e:	0e 94 4b 00 	call	0x96	; 0x96 <initSerial>
	initTimer();
 182:	0e 94 5b 00 	call	0xb6	; 0xb6 <initTimer>
 186:	ff cf       	rjmp	.-2      	; 0x186 <main+0x8>

00000188 <_exit>:
 188:	f8 94       	cli

0000018a <__stop_program>:
 18a:	ff cf       	rjmp	.-2      	; 0x18a <__stop_program>
