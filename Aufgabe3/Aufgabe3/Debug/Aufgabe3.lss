
Aufgabe3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000001de  00000272  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001de  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800102  00800102  00000274  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000002e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000744  00000000  00000000  00000324  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000676  00000000  00000000  00000a68  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002e9  00000000  00000000  000010de  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ac  00000000  00000000  000013c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000386  00000000  00000000  00001474  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000cb  00000000  00000000  000017fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  000018c5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 c6 00 	jmp	0x18c	; 0x18c <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee ed       	ldi	r30, 0xDE	; 222
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 30       	cpi	r26, 0x04	; 4
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <main>
  9e:	0c 94 ed 00 	jmp	0x1da	; 0x1da <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <init>:
int stepCount = 0;


 void init(){
	 // Port B als Ausgang
	 DDRB = 0xFF;
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	84 b9       	out	0x04, r24	; 4
	 DDRB = 0x00;
  aa:	14 b8       	out	0x04, r1	; 4
	 
	 // init timer
	 OCR1A = 0x270;
  ac:	80 e7       	ldi	r24, 0x70	; 112
  ae:	92 e0       	ldi	r25, 0x02	; 2
  b0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
  b4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>

	 // Mode 4, CTC on OCR1A
	 TCCR1B |= (1 << WGM12);
  b8:	e1 e8       	ldi	r30, 0x81	; 129
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	80 81       	ld	r24, Z
  be:	88 60       	ori	r24, 0x08	; 8
  c0:	80 83       	st	Z, r24

	 //Set interrupt on compare match
	 TIMSK1 |= (1 << OCIE1A);
  c2:	af e6       	ldi	r26, 0x6F	; 111
  c4:	b0 e0       	ldi	r27, 0x00	; 0
  c6:	8c 91       	ld	r24, X
  c8:	82 60       	ori	r24, 0x02	; 2
  ca:	8c 93       	st	X, r24

	 // set prescaler to 1024 and start the timer
	 TCCR1B |= (1 << CS12) | (1 << CS10);
  cc:	80 81       	ld	r24, Z
  ce:	85 60       	ori	r24, 0x05	; 5
  d0:	80 83       	st	Z, r24

	 sei();
  d2:	78 94       	sei
  d4:	08 95       	ret

000000d6 <doStep>:
  }
  
  // Erhöht bzw verringert den Schrittzähler
  // dreht am anfang bzw Ende die Richtung um
  void doStep(){
	  if(stepCount == 0){
  d6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
  da:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
  de:	00 97       	sbiw	r24, 0x00	; 0
  e0:	71 f4       	brne	.+28     	; 0xfe <doStep+0x28>
		  if(!direction){
  e2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  e6:	81 11       	cpse	r24, r1
  e8:	03 c0       	rjmp	.+6      	; 0xf0 <doStep+0x1a>
			  direction = true;
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		  }
		  stepCount++;
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
  f8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
  fc:	08 95       	ret
	  }
	  else if(stepCount == 5){
  fe:	85 30       	cpi	r24, 0x05	; 5
 100:	91 05       	cpc	r25, r1
 102:	61 f4       	brne	.+24     	; 0x11c <doStep+0x46>
		  if(direction){
 104:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 108:	81 11       	cpse	r24, r1
			  direction = false;
 10a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
		  }
		  stepCount--;
 10e:	84 e0       	ldi	r24, 0x04	; 4
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 116:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 11a:	08 95       	ret
	  }
	  else if(direction){
 11c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 120:	22 23       	and	r18, r18
 122:	31 f0       	breq	.+12     	; 0x130 <doStep+0x5a>
		  stepCount ++ ;
 124:	01 96       	adiw	r24, 0x01	; 1
 126:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 12a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 12e:	08 95       	ret
	  }
	  else{
		  stepCount--;
 130:	01 97       	sbiw	r24, 0x01	; 1
 132:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 136:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 13a:	08 95       	ret

0000013c <setLights>:
 }
 
 
 
  void setLights(){
	  if(stepCount == 0){
 13c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 140:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 144:	00 97       	sbiw	r24, 0x00	; 0
 146:	19 f4       	brne	.+6      	; 0x14e <setLights+0x12>
		  PORTB = 0b100000;
 148:	80 e2       	ldi	r24, 0x20	; 32
 14a:	85 b9       	out	0x05, r24	; 5
 14c:	1c c0       	rjmp	.+56     	; 0x186 <setLights+0x4a>
	  }
	  else if( stepCount == 1){
 14e:	81 30       	cpi	r24, 0x01	; 1
 150:	91 05       	cpc	r25, r1
 152:	19 f4       	brne	.+6      	; 0x15a <setLights+0x1e>
		  PORTB = 0b010000;
 154:	80 e1       	ldi	r24, 0x10	; 16
 156:	85 b9       	out	0x05, r24	; 5
 158:	16 c0       	rjmp	.+44     	; 0x186 <setLights+0x4a>
	  }
	  else if( stepCount == 2){
 15a:	82 30       	cpi	r24, 0x02	; 2
 15c:	91 05       	cpc	r25, r1
 15e:	19 f4       	brne	.+6      	; 0x166 <setLights+0x2a>
		  PORTB = 0b001000;
 160:	88 e0       	ldi	r24, 0x08	; 8
 162:	85 b9       	out	0x05, r24	; 5
 164:	10 c0       	rjmp	.+32     	; 0x186 <setLights+0x4a>
	  }
	  else if( stepCount == 3){
 166:	83 30       	cpi	r24, 0x03	; 3
 168:	91 05       	cpc	r25, r1
 16a:	19 f4       	brne	.+6      	; 0x172 <setLights+0x36>
		  PORTB = 0b000100;
 16c:	84 e0       	ldi	r24, 0x04	; 4
 16e:	85 b9       	out	0x05, r24	; 5
 170:	0a c0       	rjmp	.+20     	; 0x186 <setLights+0x4a>
	  }
	  else if( stepCount == 4){
 172:	84 30       	cpi	r24, 0x04	; 4
 174:	91 05       	cpc	r25, r1
 176:	19 f4       	brne	.+6      	; 0x17e <setLights+0x42>
		  PORTB = 0b000010;
 178:	82 e0       	ldi	r24, 0x02	; 2
 17a:	85 b9       	out	0x05, r24	; 5
 17c:	04 c0       	rjmp	.+8      	; 0x186 <setLights+0x4a>
	  }
	  else if( stepCount == 5){
 17e:	05 97       	sbiw	r24, 0x05	; 5
 180:	11 f4       	brne	.+4      	; 0x186 <setLights+0x4a>
		  PORTB = 0b000001;
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	85 b9       	out	0x05, r24	; 5
	  }
	  doStep();
 186:	0e 94 6b 00 	call	0xd6	; 0xd6 <doStep>
 18a:	08 95       	ret

0000018c <__vector_11>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include "main.h"

 ISR(TIMER1_COMPA_vect)
 {
 18c:	1f 92       	push	r1
 18e:	0f 92       	push	r0
 190:	0f b6       	in	r0, 0x3f	; 63
 192:	0f 92       	push	r0
 194:	11 24       	eor	r1, r1
 196:	2f 93       	push	r18
 198:	3f 93       	push	r19
 19a:	4f 93       	push	r20
 19c:	5f 93       	push	r21
 19e:	6f 93       	push	r22
 1a0:	7f 93       	push	r23
 1a2:	8f 93       	push	r24
 1a4:	9f 93       	push	r25
 1a6:	af 93       	push	r26
 1a8:	bf 93       	push	r27
 1aa:	ef 93       	push	r30
 1ac:	ff 93       	push	r31
	setLights();
 1ae:	0e 94 9e 00 	call	0x13c	; 0x13c <setLights>
 }
 1b2:	ff 91       	pop	r31
 1b4:	ef 91       	pop	r30
 1b6:	bf 91       	pop	r27
 1b8:	af 91       	pop	r26
 1ba:	9f 91       	pop	r25
 1bc:	8f 91       	pop	r24
 1be:	7f 91       	pop	r23
 1c0:	6f 91       	pop	r22
 1c2:	5f 91       	pop	r21
 1c4:	4f 91       	pop	r20
 1c6:	3f 91       	pop	r19
 1c8:	2f 91       	pop	r18
 1ca:	0f 90       	pop	r0
 1cc:	0f be       	out	0x3f, r0	; 63
 1ce:	0f 90       	pop	r0
 1d0:	1f 90       	pop	r1
 1d2:	18 95       	reti

000001d4 <main>:

int main(void)
{
	init();	
 1d4:	0e 94 53 00 	call	0xa6	; 0xa6 <init>
 1d8:	ff cf       	rjmp	.-2      	; 0x1d8 <main+0x4>

000001da <_exit>:
 1da:	f8 94       	cli

000001dc <__stop_program>:
 1dc:	ff cf       	rjmp	.-2      	; 0x1dc <__stop_program>
