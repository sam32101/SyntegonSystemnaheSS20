
Aufgabe3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000001d0  00000264  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001d0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800102  00800102  00000266  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000266  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000298  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000002d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000744  00000000  00000000  00000318  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000676  00000000  00000000  00000a5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002dd  00000000  00000000  000010d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ac  00000000  00000000  000013b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000039d  00000000  00000000  0000145c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000cb  00000000  00000000  000017f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  000018c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 bf 00 	jmp	0x17e	; 0x17e <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 ed       	ldi	r30, 0xD0	; 208
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 30       	cpi	r26, 0x04	; 4
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <main>
  9e:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <init>:
int stepCount = 0;


 void init(){
	 // Port B als Ausgang
	 DDRB = 0xFF;
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	84 b9       	out	0x04, r24	; 4
	 
	 // Port B auf low setzen
	 PORTB = 0x00;
  aa:	15 b8       	out	0x05, r1	; 5
	 
	 // Timer1 initialiiseren
	 // Wert wurde nicht durch ausrechnen ermittelt sondern so gewält das, dass Lauflicht cool aussieht
	 OCR1A = 0x270;
  ac:	80 e7       	ldi	r24, 0x70	; 112
  ae:	92 e0       	ldi	r25, 0x02	; 2
  b0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
  b4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>

	 // Modus 4, CTC on OCR1A
	 TCCR1B |= (1 << WGM12);
  b8:	e1 e8       	ldi	r30, 0x81	; 129
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	80 81       	ld	r24, Z
  be:	88 60       	ori	r24, 0x08	; 8
  c0:	80 83       	st	Z, r24

	 //Interrupt bei Vergleichs Übereinstimmung (Compare match)
	 TIMSK1 |= (1 << OCIE1A);
  c2:	af e6       	ldi	r26, 0x6F	; 111
  c4:	b0 e0       	ldi	r27, 0x00	; 0
  c6:	8c 91       	ld	r24, X
  c8:	82 60       	ori	r24, 0x02	; 2
  ca:	8c 93       	st	X, r24

	 // Prescaler auf 1024 und Timer starten
	 TCCR1B |= (1 << CS12) | (1 << CS10);
  cc:	80 81       	ld	r24, Z
  ce:	85 60       	ori	r24, 0x05	; 5
  d0:	80 83       	st	Z, r24

	// Interrupts aktivieren
	 sei();
  d2:	78 94       	sei
  d4:	08 95       	ret

000000d6 <doStep>:
  }
  
  // Erhöht bzw verringert den Schrittzähler
  // dreht am Anfang bzw Ende die Richtung um
  void doStep(){
	  if(stepCount == 0){
  d6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
  da:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
  de:	00 97       	sbiw	r24, 0x00	; 0
  e0:	51 f4       	brne	.+20     	; 0xf6 <doStep+0x20>
		  direction = true;
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		  stepCount++;
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
  f0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
  f4:	08 95       	ret
	  }
	  else if(stepCount == 5){
  f6:	85 30       	cpi	r24, 0x05	; 5
  f8:	91 05       	cpc	r25, r1
  fa:	49 f4       	brne	.+18     	; 0x10e <doStep+0x38>
		  direction = false;
  fc:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
		  stepCount--;
 100:	84 e0       	ldi	r24, 0x04	; 4
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 108:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 10c:	08 95       	ret
	  }
	  else if(direction){
 10e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 112:	22 23       	and	r18, r18
 114:	31 f0       	breq	.+12     	; 0x122 <doStep+0x4c>
		  stepCount ++ ;
 116:	01 96       	adiw	r24, 0x01	; 1
 118:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 11c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 120:	08 95       	ret
	  }
	  else{
		  stepCount--;
 122:	01 97       	sbiw	r24, 0x01	; 1
 124:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 128:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 12c:	08 95       	ret

0000012e <setLights>:
	 
 }
 
 // setzte je nach Wert des StepCounts das korrekte licht auf an und die restelichen aus
  void setLights(){
	  if(stepCount == 0){
 12e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 132:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 136:	00 97       	sbiw	r24, 0x00	; 0
 138:	19 f4       	brne	.+6      	; 0x140 <setLights+0x12>
		  PORTB = 0b100000;
 13a:	80 e2       	ldi	r24, 0x20	; 32
 13c:	85 b9       	out	0x05, r24	; 5
 13e:	1c c0       	rjmp	.+56     	; 0x178 <setLights+0x4a>
	  }
	  else if( stepCount == 1){
 140:	81 30       	cpi	r24, 0x01	; 1
 142:	91 05       	cpc	r25, r1
 144:	19 f4       	brne	.+6      	; 0x14c <setLights+0x1e>
		  PORTB = 0b010000;
 146:	80 e1       	ldi	r24, 0x10	; 16
 148:	85 b9       	out	0x05, r24	; 5
 14a:	16 c0       	rjmp	.+44     	; 0x178 <setLights+0x4a>
	  }
	  else if( stepCount == 2){
 14c:	82 30       	cpi	r24, 0x02	; 2
 14e:	91 05       	cpc	r25, r1
 150:	19 f4       	brne	.+6      	; 0x158 <setLights+0x2a>
		  PORTB = 0b001000;
 152:	88 e0       	ldi	r24, 0x08	; 8
 154:	85 b9       	out	0x05, r24	; 5
 156:	10 c0       	rjmp	.+32     	; 0x178 <setLights+0x4a>
	  }
	  else if( stepCount == 3){
 158:	83 30       	cpi	r24, 0x03	; 3
 15a:	91 05       	cpc	r25, r1
 15c:	19 f4       	brne	.+6      	; 0x164 <setLights+0x36>
		  PORTB = 0b000100;
 15e:	84 e0       	ldi	r24, 0x04	; 4
 160:	85 b9       	out	0x05, r24	; 5
 162:	0a c0       	rjmp	.+20     	; 0x178 <setLights+0x4a>
	  }
	  else if( stepCount == 4){
 164:	84 30       	cpi	r24, 0x04	; 4
 166:	91 05       	cpc	r25, r1
 168:	19 f4       	brne	.+6      	; 0x170 <setLights+0x42>
		  PORTB = 0b000010;
 16a:	82 e0       	ldi	r24, 0x02	; 2
 16c:	85 b9       	out	0x05, r24	; 5
 16e:	04 c0       	rjmp	.+8      	; 0x178 <setLights+0x4a>
	  }
	  else if( stepCount == 5){
 170:	05 97       	sbiw	r24, 0x05	; 5
 172:	11 f4       	brne	.+4      	; 0x178 <setLights+0x4a>
		  PORTB = 0b000001;
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	85 b9       	out	0x05, r24	; 5
	  }
	  doStep();
 178:	0e 94 6b 00 	call	0xd6	; 0xd6 <doStep>
 17c:	08 95       	ret

0000017e <__vector_11>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include "main.h"

 ISR(TIMER1_COMPA_vect)
 {
 17e:	1f 92       	push	r1
 180:	0f 92       	push	r0
 182:	0f b6       	in	r0, 0x3f	; 63
 184:	0f 92       	push	r0
 186:	11 24       	eor	r1, r1
 188:	2f 93       	push	r18
 18a:	3f 93       	push	r19
 18c:	4f 93       	push	r20
 18e:	5f 93       	push	r21
 190:	6f 93       	push	r22
 192:	7f 93       	push	r23
 194:	8f 93       	push	r24
 196:	9f 93       	push	r25
 198:	af 93       	push	r26
 19a:	bf 93       	push	r27
 19c:	ef 93       	push	r30
 19e:	ff 93       	push	r31
	setLights();
 1a0:	0e 94 97 00 	call	0x12e	; 0x12e <setLights>
 }
 1a4:	ff 91       	pop	r31
 1a6:	ef 91       	pop	r30
 1a8:	bf 91       	pop	r27
 1aa:	af 91       	pop	r26
 1ac:	9f 91       	pop	r25
 1ae:	8f 91       	pop	r24
 1b0:	7f 91       	pop	r23
 1b2:	6f 91       	pop	r22
 1b4:	5f 91       	pop	r21
 1b6:	4f 91       	pop	r20
 1b8:	3f 91       	pop	r19
 1ba:	2f 91       	pop	r18
 1bc:	0f 90       	pop	r0
 1be:	0f be       	out	0x3f, r0	; 63
 1c0:	0f 90       	pop	r0
 1c2:	1f 90       	pop	r1
 1c4:	18 95       	reti

000001c6 <main>:

int main(void)
{
	// initialisieren
	init();	
 1c6:	0e 94 53 00 	call	0xa6	; 0xa6 <init>
 1ca:	ff cf       	rjmp	.-2      	; 0x1ca <main+0x4>

000001cc <_exit>:
 1cc:	f8 94       	cli

000001ce <__stop_program>:
 1ce:	ff cf       	rjmp	.-2      	; 0x1ce <__stop_program>
