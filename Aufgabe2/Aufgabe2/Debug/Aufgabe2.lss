
Aufgabe2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000020e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000019a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  0000020e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000020e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000240  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006fc  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000646  00000000  00000000  000009b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000029c  00000000  00000000  00000ffa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000009c  00000000  00000000  00001298  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000036a  00000000  00000000  00001334  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000cb  00000000  00000000  0000169e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001769  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__vector_11>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 c8 00 	call	0x190	; 0x190 <main>
  88:	0c 94 cb 00 	jmp	0x196	; 0x196 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <init>:

int stepcount = 0;

 void init(){
	 // B als Ausgang
	 DDRB |= 0xFF;
  90:	84 b1       	in	r24, 0x04	; 4
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	84 b9       	out	0x04, r24	; 4
	 PORTB = 0x00;
  96:	15 b8       	out	0x05, r1	; 5
	 
	 // Timer initialisieren
	 // OcRN = [ (16MHz / 256) * 0.1]-1 = 6249 = 0x1869
	 OCR1A = 0x1869;
  98:	89 e6       	ldi	r24, 0x69	; 105
  9a:	98 e1       	ldi	r25, 0x18	; 24
  9c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
  a0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>

	 TCCR1B |= (1 << WGM12);
  a4:	e1 e8       	ldi	r30, 0x81	; 129
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	80 81       	ld	r24, Z
  aa:	88 60       	ori	r24, 0x08	; 8
  ac:	80 83       	st	Z, r24
	 // Modus 4, CTC auf OCR1A
	 
	 TIMSK1 |= (1 << OCIE1A);
  ae:	af e6       	ldi	r26, 0x6F	; 111
  b0:	b0 e0       	ldi	r27, 0x00	; 0
  b2:	8c 91       	ld	r24, X
  b4:	82 60       	ori	r24, 0x02	; 2
  b6:	8c 93       	st	X, r24
	 //Löse Interupt bei Vergleichsübereinstimmung ( compare match ) aus

	 TCCR1B |= (1 << CS12) | (1 << CS10);
  b8:	80 81       	ld	r24, Z
  ba:	85 60       	ori	r24, 0x05	; 5
  bc:	80 83       	st	Z, r24
	 // prescaler auf 1024 und timer starten

	 sei();
  be:	78 94       	sei
  c0:	08 95       	ret

000000c2 <step>:
 }
 
 // setze je nach position die korrekten Farben und erhöhe den Schrittzähler
   void step(){
	   
	   switch(stepcount)
  c2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  c6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  ca:	8a 30       	cpi	r24, 0x0A	; 10
  cc:	91 05       	cpc	r25, r1
  ce:	b9 f0       	breq	.+46     	; 0xfe <step+0x3c>
  d0:	1c f4       	brge	.+6      	; 0xd8 <step+0x16>
  d2:	00 97       	sbiw	r24, 0x00	; 0
  d4:	41 f0       	breq	.+16     	; 0xe6 <step+0x24>
  d6:	32 c0       	rjmp	.+100    	; 0x13c <step+0x7a>
  d8:	8b 30       	cpi	r24, 0x0B	; 11
  da:	91 05       	cpc	r25, r1
  dc:	e1 f0       	breq	.+56     	; 0x116 <step+0x54>
  de:	85 31       	cpi	r24, 0x15	; 21
  e0:	91 05       	cpc	r25, r1
  e2:	29 f1       	breq	.+74     	; 0x12e <step+0x6c>
  e4:	2b c0       	rjmp	.+86     	; 0x13c <step+0x7a>
	   {
			case 0:
				// red
				PORTB = 0b010000;
  e6:	80 e1       	ldi	r24, 0x10	; 16
  e8:	85 b9       	out	0x05, r24	; 5
				stepcount++;
  ea:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  ee:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  f2:	01 96       	adiw	r24, 0x01	; 1
  f4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  f8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
				break;
  fc:	08 95       	ret
			case 10:
				// red yellow
				PORTB = 0b010100;
  fe:	84 e1       	ldi	r24, 0x14	; 20
 100:	85 b9       	out	0x05, r24	; 5
				stepcount++;
 102:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 106:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 10a:	01 96       	adiw	r24, 0x01	; 1
 10c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 110:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
				break;
 114:	08 95       	ret
			case 11:
				// green
				PORTB = 0b000001;
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	85 b9       	out	0x05, r24	; 5
				stepcount++;
 11a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 11e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 122:	01 96       	adiw	r24, 0x01	; 1
 124:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 128:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
				break;
 12c:	08 95       	ret
			case 21:
				// yellow
				PORTB = 0b000100;
 12e:	84 e0       	ldi	r24, 0x04	; 4
 130:	85 b9       	out	0x05, r24	; 5
				// reset counter
				stepcount=0;
 132:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 136:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
				break;
 13a:	08 95       	ret
			default:
				stepcount++;
 13c:	01 96       	adiw	r24, 0x01	; 1
 13e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 142:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 146:	08 95       	ret

00000148 <__vector_11>:

// Aufgabenbeschreibung: Ampelschaltung mit drei LEDs: Zunächst leuchtet die rote LED 1000 ms, danach rot-gelb 100ms, grün 1000 ms und gelb 100ms. Danach beginnt er Zyklus von Vorne.

// Vom Timer ausgelöster Interrupt, wird alle 100ms aufgerufen
ISR (TIMER1_COMPA_vect)
{
 148:	1f 92       	push	r1
 14a:	0f 92       	push	r0
 14c:	0f b6       	in	r0, 0x3f	; 63
 14e:	0f 92       	push	r0
 150:	11 24       	eor	r1, r1
 152:	2f 93       	push	r18
 154:	3f 93       	push	r19
 156:	4f 93       	push	r20
 158:	5f 93       	push	r21
 15a:	6f 93       	push	r22
 15c:	7f 93       	push	r23
 15e:	8f 93       	push	r24
 160:	9f 93       	push	r25
 162:	af 93       	push	r26
 164:	bf 93       	push	r27
 166:	ef 93       	push	r30
 168:	ff 93       	push	r31
	step();
 16a:	0e 94 61 00 	call	0xc2	; 0xc2 <step>
}
 16e:	ff 91       	pop	r31
 170:	ef 91       	pop	r30
 172:	bf 91       	pop	r27
 174:	af 91       	pop	r26
 176:	9f 91       	pop	r25
 178:	8f 91       	pop	r24
 17a:	7f 91       	pop	r23
 17c:	6f 91       	pop	r22
 17e:	5f 91       	pop	r21
 180:	4f 91       	pop	r20
 182:	3f 91       	pop	r19
 184:	2f 91       	pop	r18
 186:	0f 90       	pop	r0
 188:	0f be       	out	0x3f, r0	; 63
 18a:	0f 90       	pop	r0
 18c:	1f 90       	pop	r1
 18e:	18 95       	reti

00000190 <main>:

int main(void)
{
   init(); // initialisieren 
 190:	0e 94 48 00 	call	0x90	; 0x90 <init>
 194:	ff cf       	rjmp	.-2      	; 0x194 <main+0x4>

00000196 <_exit>:
 196:	f8 94       	cli

00000198 <__stop_program>:
 198:	ff cf       	rjmp	.-2      	; 0x198 <__stop_program>
